@page "/updatePerfume/{id:int}"
@using crud_maui_blazor.Models
@using crud_maui_blazor.Database
@inject NavigationManager navigation;
<h3>Deletar Novo perfume</h3>
<div class="col-md-12">
    <EditForm FormName="addStudent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="col-md-12">
            <EditForm Model="perfume" OnValidSubmit="DeletePerfume" FormName="Deletar Perfume">
                <div class="row">
                    <div class="col-md-6">

                        <div class="form-group">
                            <label class="control-label">Nome </label>
                            <InputText form="Name" class="form-control" @bind-Value="@perfume.Name"></InputText>
                            <ValidationMessage For="() => perfume.Nmae" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Volume </label>
                            <InputText form="Volume" class="form-control" @bind-Value="@perfume.Volume"></InputText>
                            <ValidationMessage For="() => perfume.Nmae" />
                        </div>
                    </div>
                </div>
                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary float-end">Atualizar Perfume</button>
                    <a href="/list" class="btn btn-danger float-start">Voltar para lista</a>
                </div>
        </div>
</div>
</EditForm>
</div>
@code {
    [SupplyParameterFromForm]
    public Perfume perfume { get; set; } = new Perfume();
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        LoadPerfume()
    }
    protected async Task LoadPerfume()
    {
        var perfume = await App.Database.GetRowByIdAsync<Perfume>("Perfume", "Id", IDatePicker.ToString());
        perfumrs = (Perfume)perfume;
    }
    protected async Task DeletePerfume()
    {
        var ret = await App.Database.DeleteAsync<Perfume>(perfume);
        if (ret > 0)
        {
            await App.Current.MainPage.DisplayAlert("Sucesso", "Perfume atualizado com sucesso", "OK");
            navigation.NavigateTo("/list");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Erro", "Erro ao atualizar perfume", "OK");
            navigation.NavigateTo("/list");
        }
    }
}
